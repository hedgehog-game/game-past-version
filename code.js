'use strict';
window.onerror = function(message, url, line) {
    alert(`Error: ${message}\n${url}: ${line}`);
};
init();
function init() {
}

const FW = "–í–ø–µ—Ä–µ–¥";
const LEFT = "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–ª—ñ–≤–æ";
const RIGHT = "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–ø—Ä–∞–≤–æ";
const REPEAT = "–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏";
const ENDBLOCK = "–ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É";
const PICK_UP = "–ü—ñ–¥–Ω—è—Ç–∏";
const UP = "–í–≥–æ—Ä—É";
const DOWN = "–í–Ω–∏–∑";
const APPLE = "–Ø–±–ª—É–∫–æ";
const STONE = "–ö–∞–º—ñ–Ω—å";
const NO_STONE = "–ù–µ–º–∞—î –∫–∞–º–µ–Ω—é";
const IF = "–Ø–∫—â–æ";
const END_IF = "–ö—ñ–Ω–µ—Ü—å –Ø–∫—â–æ";
const IF_CASE1 =45;

const settings= [
  // 1
  {'solution':[FW,FW,FW],
  'squares': [11,12,13,14],
//  'buttonId':['btnFw','btnLeft'],
  'startAt': 11,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[15],
  'degrees':0,
  'ifCase':0,
  'help':'–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É "–í–ø–µ—Ä–µ–¥", —Å—Ç—ñ–ª—å–∫–∏ —Å–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ,\
   —â–æ–± –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–≤–µ—Ä–µ–π.<br><br>\
   –î–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –Ω–µ—ó —É <span style="background-color:green; color:yellow">–∑–µ–ª–µ–Ω–æ–º—É</span> –ø–æ–ª—ñ, <br>\
   —ñ —Ü—è –∫–æ–º–∞–Ω–¥–∞ –∑ º—è–≤–∏—Ç—å—Å—è —É <span style="background-color:blue; color:yellow">—Å–∏–Ω—å–æ–º—É</span> –ø–æ–ª—ñ.<br><br>\
   –á–∂–∞—á–æ–∫ –º–∞—î –∑—É–ø–∏–Ω–∏—Ç–∏—Å—è –±—ñ–ª—è –¥–≤–µ—Ä–µ–π, –∞ –Ω–µ –≤—Ä—ñ–∑–∞—Ç–∏—Å—è –≤ –Ω–∏—Ö.<br><br>\
   –ó–∞–ø—É—Å–∫–∞–π –∫–æ–¥ –∫–Ω–æ–ø–∫–æ—é ‚ñ∂ <br><br>\
   –Ø–∫—â–æ –¥–æ–¥–∞–≤ –∑–∞–π–≤—É –∫–æ–º–∞–Ω–¥—É, —Ç–æ —ó—ó –º–æ–∂–Ω–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–Ω–æ–ø–∫–æ—é ‚å´<br><br>\
   –£–≤–µ—Å—å –∫–æ–¥ –º–æ–∂–Ω–∞ –æ—á–∏—Å—Ç–∏—Ç–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–Ω–æ–ø–∫–∏ üóë'
  },

  // 2 
  {'solution':[FW,FW,RIGHT,FW,FW],
  'squares': [47,38,29,30,31],
  'startAt': 47,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[32],
  'degrees':-90,
  'ifCase':0,

  'help':'–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥–∏ "–í–ø–µ—Ä–µ–¥" —Ç–∞ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–ø—Ä–∞–≤–æ",\
  —â–æ–± –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–≤–µ—Ä–µ–π'},

  // 3
  {'solution':[FW,FW,RIGHT,FW,LEFT,FW],
  'squares': [47,38,29,30,21],
  'startAt': 47,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[12],
  'degrees':-90,
  'ifCase':0,

  'help':'–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥–∏ "–í–ø–µ—Ä–µ–¥" —Ç–∞ "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–ø—Ä–∞–≤–æ",\
  —â–æ–± –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–≤–µ—Ä–µ–π, —Ä—É—Ö–∞—é—á–∏—Å—å –ø–æ —Ç—Ä–∞–≤—ñ'},

  // 4
  {'solution':[FW,FW,PICK_UP,FW,LEFT,FW],
  'squares': [24,23,22,21,30],
  'startAt': 24,
  'appleAt':22,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[39],
  'degrees':180,
  'ifCase':0,

  'help':'–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —ñ –Ω–æ–≤—É –∫–æ–º–∞–Ω–¥—É  "–ü—ñ–¥–Ω—è—Ç–∏",\
  —â–æ–± –ø—ñ–¥–Ω—è—Ç–∏ —è–±–ª—É–∫–æ —ñ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –¥–æ –¥–≤–µ—Ä–µ–π'},

  // 5
  {'solution':[FW,RIGHT,FW,LEFT,FW,FW,LEFT,FW,RIGHT,FW],
  'squares': [10,11,12,13,14,20,21,22],
  'startAt': 10,
  'appleAt':undefined,
  'stoneAt':12,
  'questionAt':undefined,
  'doorAt':[15],
  'degrees':0,
  'ifCase':0,

  
  'help':'–î–æ–ø–æ–º–æ–∂–∏ —ó–∂–∞—á–∫—É –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–≤–µ—Ä–µ–π, –æ–º–∏–Ω–∞—é—á–∏ –∫–∞–º—ñ–Ω—å.–†—É—Ö–∞—Ç–∏—Å—è –ø–æ —Ç—Ä–∞–≤—ñ.'},
  //6
  {'solution':[REPEAT+' 5',FW,ENDBLOCK],
  'squares': [11,12,13,14,15,16],
  'startAt': 11,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[17],
  'degrees':0,
  'ifCase':0,

  'help':'–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–¥ –∫–æ—Ä–æ—Ç—à–∏–º. –ü—ñ—Å–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É "–í–ø–µ—Ä–µ–¥". –í–∏–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å.–Ü –Ω–µ –∑–∞–±—É–¥—å –≤ –∫—ñ–Ω—Ü—ñ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É "–ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É"'},
//TODO
  //7
  {'solution':[REPEAT+' 5',FW,ENDBLOCK,RIGHT,FW],
  'squares': [11,12,13,14,15,16,25],
  'startAt': 11,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[34],
  'degrees':0,
  'ifCase':0,

  'help':'–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–¥ –∫–æ—Ä–æ—Ç—à–∏–º. \
  –ü—ñ—Å–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É "–í–ø–µ—Ä–µ–¥". \
  –í–∏–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å.–Ü –Ω–µ –∑–∞–±—É–¥—å –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ "–ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É" –¥–æ–¥–∞—Ç–∏ —â–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–º–∞–Ω–¥–∏'},

  // 8
  {'solution':[REPEAT+' 3',FW,RIGHT,FW,LEFT,ENDBLOCK,FW],
  'squares': [11,12,21,22,31,32,41,42],
  'startAt': 11,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[43],
  'degrees':0,
  'ifCase':0,

  'help':'–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏", —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–¥ –∫–æ—Ä–æ—Ç—à–∏–º. \
  –í—Å–µ—Ä–µ–¥–∏–Ω—ñ –±–ª–æ–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≤–∂–µ –¥–µ–∫—ñ–ª—å–∫–∞ –∫–æ–º–∞–Ω–¥'},

  // 9
  {'solution':[REPEAT+' 8',FW,ENDBLOCK,RIGHT,FW,FW,RIGHT,REPEAT+' 4',FW,ENDBLOCK],
  'squares': [10,11,12,13,14,15,16,17,18,27,36,35,34,33,32],
  'startAt': 10,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[31],
  'degrees':0,
  'ifCase':0,
  'help':'–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É "–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏" –¥–≤—ñ—á—ñ. \
  –í—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–∂–Ω–æ–≥–æ –±–ª–æ–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –ª–∏—à–µ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–í–ø–µ—Ä–µ–¥"'},
  // 10
  {'solution':[REPEAT+' 3',FW,LEFT,FW,RIGHT,ENDBLOCK, REPEAT+' 3',FW,RIGHT,FW,LEFT,ENDBLOCK],
  'squares': [37,38,29,30,21,22,13,14,23,24,33,34,43],
  'startAt': 37,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[44],
  'degrees':0,
  'ifCase':0,
  'help':'–¢—É—Ç –º–∞—é—Ç—å –±—É—Ç–∏ –¥–≤–∞ —Ü–∏–∫–ª–∏.\
  <br><br>–ó–∞ —ó—Ö –º–µ–∂–∞–º–∏ –∂–æ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥'},
    //Nested loops
// 11
  {'solution':[REPEAT+' 3',REPEAT+' 7',FW,ENDBLOCK,RIGHT,ENDBLOCK],
  'squares': [1,2,3,4,5,6,7,8,17,26,35,44,53,62,71,70,69,68,67,66,65,64],
  'startAt': 1,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[55],
  'degrees':0,
  'ifCase':0,
  'help':'–í –±–ª–æ—Ü—ñ –∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è–º –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º–∞—î –±—É—Ç–∏ —â–µ –æ–¥–∏–Ω –±–ª–æ–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è —ñ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –≤–∫–ª–∞–¥–µ–Ω–æ–≥–æ –±–ª–æ–∫—É —â–µ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. '},
  // 12
  {'solution':[REPEAT+' 2',REPEAT+' 7',FW,ENDBLOCK,RIGHT,ENDBLOCK,FW],
  'squares': [1,2,3,4,5,6,7,8,17,26,35,44,53,62,71,70],
  'startAt': 1,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[69],
  'degrees':0,
  'ifCase':0,
  'help':'–ü—ñ—Å–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –±–ª–æ–∫—É —â–µ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞. '},

  // 13
  {'solution':[REPEAT+' 3',REPEAT+' 7',FW,ENDBLOCK,RIGHT,ENDBLOCK,REPEAT+' 2',REPEAT+' 4',FW,ENDBLOCK,RIGHT,ENDBLOCK,],
  'squares': [1,2,3,4,5,6,7,8,17,26,35,44,53,62,71,70,69,68,67,66,65,64,55,46,37,28,29,30,31,32],
  'startAt': 1,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[41],
  'degrees':0,
  'ifCase':0,
  'help':'–î–≤–∞ –≤–∫–ª–∞–¥–µ–Ω–∏—Ö —Ü–∏–∫–ª–∏'},

  // 14
  {'solution':[REPEAT+' 2',REPEAT+' 6',FW,ENDBLOCK,RIGHT,FW,FW,RIGHT,REPEAT+' 6',FW,ENDBLOCK,LEFT,FW,FW,LEFT,ENDBLOCK],
  'squares': [2,3,4,5,6,7,8,17,26,25,24,23,22,21,20,29,38,39,40,41,42,43,44,53,62,61,60,59,58,57,56,65,74],
  'startAt': 2,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[75],
  'degrees':0,
  'ifCase':0,
  'help':'–£ –æ–¥–Ω–æ–º—É –∑–æ–≤–Ω—ñ—à–Ω—å–æ–º—É —Ü–∏–∫–ª—ñ –¥–≤–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö —Ü–∏–∫–ª–∏.'},
  // 15
  {'solution':[REPEAT+' 2',REPEAT+' 4',FW,FW,FW,LEFT,ENDBLOCK,LEFT,LEFT,ENDBLOCK],
  'squares': [5,6,7,8,17,26,35,34,33,32,31,30,29,38,47,56,57,58,59,50,41,23,14],
  'startAt': 32,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':undefined,
  'doorAt':[1],
  'degrees':0,
  'ifCase':0,
  'help':'–û–±—ñ–π—Ç–∏ –≤—Å—ñ –∑–µ–ª–µ–Ω—ñ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏ —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è —É –≤–∏—Ö—ñ–¥–Ω–µ –ø–æ–ª–æ–∂–µ–Ω–Ω—è. <br><br>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –Ω–µ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –≤–∫–ª–∞–¥–µ–Ω–æ–≥–æ —Ü–∏–∫–ª—É.<br><br> –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–ø—Ä–∞–≤–æ".'},
  //Conditions
//16
  {'solution':[FW,IF+' '+APPLE,PICK_UP,END_IF,FW],
  'squares': [14,23,32],
  'startAt': 14,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':23,
  'doorAt':[41],
  'degrees':90,
  'ifCase':1,//–í–∏–ø–∞–¥–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É–º–æ–≤–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å/–Ω–∞—è–≤–Ω—ñ—Å—Ç—å —è–±–ª—É–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó 'questionAt'
  'help':'–ù–∞ —à–ª—è—Ö—É —ó–∂–∞—á–∫–∞ –º–æ–∂–µ –ª–µ–∂–∞—Ç–∏ —è–±–ª—É–∫–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É "–ü—ñ–¥–Ω—è—Ç–∏" –ª–∏—à–µ —É –≤–∏–ø–∞–¥–∫—É, —è–∫—â–æ —è–±–ª—É–∫–æ –¥—ñ–π—Å–Ω–æ –ª–µ–∂–∏—Ç—å –Ω–∞ –ø–æ–ª—ñ, –ø–æ–∑–Ω–∞—á–µ–Ω–æ–º—É –∑–Ω–∞–∫–æ–º "?"\
  –î–ª—è —Ü—å–æ–≥–æ —Ç–∏—Ü—è–π –Ω–∞ "–Ø–∫—â–æ" —ñ –æ–±–∏—Ä–∞–π "–Ø–±–ª—É–∫–æ". <br><br>–ù–µ –∑–∞–±—É–¥—å –∑–∞–∫—Ä–∏—Ç–∏ –±–ª–æ–∫ –∫–æ–º–∞–Ω–¥ (–∫–æ–º–∞–Ω–¥—É) –∑ "–Ø–∫—â–æ" –∫–æ–º–∞–Ω–¥–æ—é "–ö—ñ–Ω–µ—Ü—å –Ø–∫—â–æ". <br><br>–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π. '},
  //17
  {'solution':[REPEAT+' 6',FW,IF+' '+APPLE,PICK_UP,END_IF,ENDBLOCK],
  'squares': [11,12,13,14,15,16,17],
  'startAt': 11,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':14,
  'doorAt':[18],
  'degrees':0,
  'ifCase':1,// Apple on pathway
  'help':'–ù–∞ —à–ª—è—Ö—É —ó–∂–∞—á–∫–∞ –º–æ–∂–µ –ª–µ–∂–∞—Ç–∏ —è–±–ª—É–∫–æ.–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–º–æ–≤—É, —è–∫—É –≤–∫–ª–∞–¥–µ–Ω–æ —É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è'},
  //18
  {'solution':[IF+' '+STONE,RIGHT,FW,FW,LEFT,END_IF,IF+' '+NO_STONE,FW,FW,END_IF],
  'squares': [2,3,4,11,20],
  'startAt': 2,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':3,
  'doorAt':[5,21],
  'degrees':0,
  'ifCase':2,// Stone on pathway
  'help':'–ù–∞ —à–ª—è—Ö—É —ó–∂–∞—á–∫–∞ –º–æ–∂–µ –ª–µ–∂–∞—Ç–∏ –∫–∞–º—ñ–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–º–æ–≤—É "–Ø–∫—â–æ". –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–≥–ª—è–Ω—å –≤–∏–ø–∞–¥–æ–∫, –∫–æ–ª–∏ –∫–∞–º—ñ–Ω—å —î, –∞ –ø–æ—Ç—ñ–º –∫–æ–ª–∏ –π–æ–≥–æ –Ω–µ–º–∞—î.<br><br>\
   –ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.<br><br>\
   –á–∂–∞—á–æ–∫ –º–∞—î –±—É—Ç–∏ —Ä–æ–∑–≤–µ—Ä–Ω—É—Ç–∏–π —É –±—ñ–∫ –¥–≤–µ—Ä–µ–π'},
  //19
  {'solution':[IF+' '+STONE,RIGHT,REPEAT+' 3',FW,FW,LEFT,ENDBLOCK,LEFT,LEFT,FW,FW,END_IF,IF+' '+NO_STONE,REPEAT+' 4',FW,ENDBLOCK,END_IF],
  'squares': [2,3,4,5,6,11,20,21,22,13],
  'startAt': 2,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':3,
  'doorAt':[7],
  'degrees':0,
  'ifCase':2,// Stone on pathway
  'help':'–ù–∞ –∫–æ—Ä–æ—Ç—à–æ–º—É —à–ª—è—Ö—É —ó–∂–∞—á–∫–∞ –º–æ–∂–µ –ª–µ–∂–∞—Ç–∏ –∫–∞–º—ñ–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É–º–æ–≤—É "–Ø–∫—â–æ". –°–ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–≥–ª—è–Ω—å –≤–∏–ø–∞–¥–æ–∫, –∫–æ–ª–∏ –∫–∞–º—ñ–Ω—å —î, –∞ –ø–æ—Ç—ñ–º –∫–æ–ª–∏ –π–æ–≥–æ –Ω–µ–º–∞—î.<br><br>\
   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –¥–ª—è –º—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É.<br><br> \
   –†–æ–∑–≤–æ—Ä–æ—Ç –≤–∏–∫–æ–Ω—É–π –≤–ª—ñ–≤–æ. <br><br>\
   –ú–∞—î –±—É—Ç–∏ 17 —Ä—è–¥–∫—ñ–≤ –∫–æ–¥—É'},
  //20
  {'solution':[IF+' '+STONE,RIGHT,FW,FW,LEFT,END_IF,REPEAT+' 5',FW,ENDBLOCK],
  'squares': [2,3,4,5,6,7,11,20,21,22,23,24,25],
  'startAt': 2,
  'appleAt':undefined,
  'stoneAt':undefined,
  'questionAt':3,
  'doorAt':[8,26],
  'degrees':0,
  'ifCase':2,// Stone on pathway
  'help':'–ù–∞ –∫–æ—Ä–æ—Ç—à–æ–º—É —à–ª—è—Ö—É —ó–∂–∞—á–∫–∞ –º–æ–∂–µ –ª–µ–∂–∞—Ç–∏ –∫–∞–º—ñ–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç—É–≤—É–π –ª–∏—à–µ –æ–¥–Ω—É —É–º–æ–≤—É - —è–∫—â–æ —î –∫–∞–º—ñ–Ω—å.<br><br> –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.'},

];
// On Development stage
///////////////////////
let commands=[];
settings.forEach(e=>commands.push([]));
if (typeof localStorage.commands !== 'undefined')
if (JSON.parse(localStorage.commands).length<settings.length){
     localStorage.commands = JSON.stringify(commands);
   }

let success=[];
settings.forEach(e=>success.push(''));
if (typeof localStorage.success !== 'undefined')
if (JSON.parse(localStorage.success).length<settings.length){
     localStorage.success = JSON.stringify(success);
   }
///////////////////////

getSuccess();


let levelIndex = 0;
let isBlock=0;
let door;
let door2;
console.log(localStorage.commands+'Storage');

var divCode = document.querySelector('#codeList');
const divWrapper =document.querySelector('#wrapper');
const divMenu =document.querySelector('#menu');

const helpBtn = document.querySelector("#helpBtn");
const helpDialog = document.querySelector("#helpDialog");
const helpText = document.querySelector("#helpText");
const closeDialog = document.querySelector("#closeDialog");

helpBtn.addEventListener("click",()=>{helpText.innerHTML=settings[levelIndex]['help'];helpDialog.showModal()});
closeDialog.addEventListener("click",()=>{helpDialog.close()});

var btn;

// getData();
function getData(){
// if(window.location.pathname.split("/").pop()==='game.html'){
  if (typeof localStorage.commands !== 'undefined'){
  //TODO save results for multiple levels
  commands = JSON.parse(localStorage.commands);
  console.log(commands)
  onReopen();
  // }
}}
console.log('Storage =' + commands)

function onReopen(){
  //insert creation of buttons(code) when browser is opening
    
  //TODO add levelIndex to commands

  commands[levelIndex].forEach(command=>{
    insertCommand(command);
    btn.textContent=command;
    
  })
  
}
//localStorage.commands = JSON.stringify([[],[],[],[]]);
function insertCommand(command){ 
    btn = document.createElement('button')
    if (command===ENDBLOCK || command===END_IF){
      if (isBlock>0)
      isBlock-=1;
    }
    console.log('isBlock='+isBlock)

   // if(isBlock)
    btn.style.marginLeft=5+isBlock*20+'px'

    var br = document.createElement('br')
    divCode.insertAdjacentElement('beforeend',btn)
    divCode.insertAdjacentElement('beforeend',br)
    
    if (command.includes(REPEAT)|| command.slice(0,4)===IF){
      isBlock+=1;
      console.log('isBlock='+isBlock)
    }
}    

function onBtnFw(e, text=REPEAT+' '){
    const className=e.target.className;
    if (className==='repeat'){
      text = REPEAT+' ';
    }
    if (className==='ifOperator'){
      text = IF +' ';
    }

    const command=text+e.target.innerText
    insertCommand(command);
    btn.textContent=command;
    commands[levelIndex].push(btn.textContent);
    localStorage.commands = JSON.stringify(commands);
    
    console.log(commands)
    console.log(levelIndex)
}

document.querySelectorAll('.repeat').forEach(a=>{
  a.onclick = onBtnFw;
})

document.querySelectorAll('.ifOperator').forEach(a=>{
  a.onclick = onBtnFw;
})

document.querySelectorAll('.levelBtn').forEach((e,i)=>{
  e.onclick=function(){

    divWrapper.style.display = 'block';
    divMenu.style.display = 'none';
    let grid = document.querySelectorAll('.grid-item');
    levelIndex=i;

    let hh = document.createElement('img');
    hh.setAttribute('src',"images/hedgehog_small.png");
    hh.setAttribute('id','hh');
    
    let apple = document.createElement('img');
    apple.setAttribute('src',"images/apple.png");
    apple.setAttribute('id','apple');
    console.log('create'+apple);

    let stone = document.createElement('img');
    stone.setAttribute('src',"images/stone.png");
    stone.setAttribute('id','stone');

    door = document.createElement('img');
    door.setAttribute('src',"images/door.png");
    door.setAttribute('id','door');
    
    if (settings[levelIndex]['doorAt'].length===2){
      door2 = document.createElement('img');
      door2.setAttribute('src',"images/door.png");
      door2.setAttribute('id','door2');
    }

    if(settings[levelIndex]['appleAt']===undefined){
      document.querySelector('#dashBoard').insertAdjacentElement('beforeend',apple);
      apple.style.opacity=0;

    }

    if(settings[levelIndex]['stoneAt']===undefined){
      document.querySelector('#dashBoard').insertAdjacentElement('beforeend',stone);
      stone.style.opacity=0;

    }


    //settings[i]['startAt']-1

    getData();
    grid.forEach((e,i)=>{
      if (settings[levelIndex]['squares'].includes(i+1)){
        e.classList.add('grass')
      }
      if (i===settings[levelIndex]['startAt']-1){
        e.appendChild(hh);
        hh.style.transform = 'rotate('+settings[levelIndex]['degrees']+'deg)'
      }
      if (i===settings[levelIndex]['appleAt']-1){
        e.appendChild(apple);        
      }
      if (i===settings[levelIndex]['stoneAt']-1){
        e.appendChild(stone);        
      }
      if (i===settings[levelIndex]['questionAt']-1){
        e.innerHTML='?';
        e.setAttribute('id','question');
      }
      if (i===settings[levelIndex]['doorAt'][0]-1){
        e.appendChild(door);
      }
      if (settings[levelIndex]['doorAt'].length===2){
        if (i===settings[levelIndex]['doorAt'][1]-1){
          e.appendChild(door2);
        }
      }

    });
    document.querySelector('#level').innerHTML = '–†—ñ–≤–µ–Ω—å '+(levelIndex+1)
  }
})

function getSuccess(){
  if (typeof localStorage.success !== 'undefined'){
    //TODO save results for multiple levels
    success = JSON.parse(localStorage.success);
  }
  
  document.querySelectorAll('.levelBtn').forEach((levelBtn,index)=>{
    levelBtn.innerHTML='–†—ñ–≤–µ–Ω—å'+' '+(index+1)+success[index];
  })  
}

function menu(){
  // document.querySelector('#btnLeft').textContent='kghkg'
  // console.log('khh')va
 
  divWrapper.style.display = 'none';
  divMenu.style.display = 'block';

  getSuccess();

  document.getElementById('hh').remove();
  if (document.getElementById('apple')!==null)
    document.getElementById('apple').remove();
  if (document.getElementById('stone')!==null)
    document.getElementById('stone').remove();
  if (document.getElementById('question')!==null)
    document.getElementById('question').innerHTML='';
  document.getElementById('door').remove();
  if (settings[levelIndex]['doorAt'].length===2){
    document.getElementById('door2').remove();
  }

  let grid = document.querySelectorAll('.grass');
  grid.forEach((e,i)=>{e.classList.remove('grass')});

  var list =  document.querySelector('#codeList');
  while (list.hasChildNodes()) {
    list.removeChild(list.firstChild);
  }
  console.log(commands)
  isBlock=0


}

function deleteCommand(){
  //TODO
  const command = commands[levelIndex].pop();
  var commandList =  document.querySelector('#codeList');
  //remove button and br elements
  if (commandList.hasChildNodes()){
  commandList.removeChild(commandList.lastChild);}
  if (commandList.hasChildNodes()){
  commandList.removeChild(commandList.lastChild);}
  //TODO
  localStorage.commands = JSON.stringify(commands)

  if (command===ENDBLOCK || command===END_IF){
    isBlock+=1;
  }  
  if (command.includes(REPEAT)|| command.slice(0,4)===IF){
        if (isBlock>0)
          isBlock-=1;
  }
          
}

function clearAll(){
  /* –≤–∏–¥–∞–ª—è—î–º–æ html elements and –∫–æ–¥ */
  var list =  document.querySelector('#codeList');
  while (list.hasChildNodes()) {
    list.removeChild(list.firstChild);
  }
  //TODO
  commands[levelIndex]=[]
  localStorage.commands = JSON.stringify(commands)          
  isBlock=0
}

function isCollide(big,small){
  return (
    (big.left<small.left)&&
    (big.right > small.right)&&
    (big.top <  small.top)&&
    (big.bottom > small.bottom)
  )
}
function resetImg(object, object_str){
  document.querySelectorAll('.grid-item').forEach((e,i)=>{       
    if (i===settings[levelIndex]['questionAt']-1){
      document.getElementById(`${object_str}`).remove();
      object = document.createElement('img');
      object.setAttribute('src',`images/${object_str}.png`);
      object.setAttribute('id',`${object_str}`);
      e.appendChild(object);
      object.style.opacity=1;      

    }        
  });
}
let hedgehog;
let apple;
let stone;

function setDefaultPositions(save_pos_x,save_pos_y){
  hedgehog.style.left = save_pos_x+"px";
  hedgehog.style.top = save_pos_y+"px";
  hedgehog.setAttribute('src',"images/hedgehog_small.png");
  if(settings[levelIndex]['appleAt']!==undefined){
    apple.style.opacity = 1;
  }

  if(settings[levelIndex]['stoneAt']!==undefined){
    stone.style.opacity = 1;
  }
  if(settings[levelIndex]['questionAt']!==undefined){
    document.getElementById('question').style.color='Black';}

  if(settings[levelIndex]['ifCase']===1){
    // ifCase1(apple,'?');
    apple.style.opacity = 0;
    apple.style.left = 0;
  }
  if(settings[levelIndex]['ifCase']===2){
    // ifCase1(apple,'?');
    stone.style.opacity = 0;
    stone.style.left = 0;
  }
  hedgehog.style.transform = 'rotate('+settings[levelIndex]['degrees']+'deg)';

}

function ifCase(index, condition, caseNo, ifIsTrue){
  let command = commands[levelIndex][index]
  if (command===condition && settings[levelIndex]['ifCase']===caseNo){
    if (ifIsTrue){
      index++
      command = commands[levelIndex][index]
  } else{
    while (command!==END_IF) {
      index++;
      command = commands[levelIndex][index];

      if( index===commands[levelIndex].length-1){
        break;
      }
    }          
      }
  }
  return index;
}

function myMove() {     
    let id = null;
    hedgehog = document.querySelector("#hh");   
    apple = document.querySelector('#apple');
    stone = document.querySelector('#stone');
    let ifIsTrue=false;

    if (settings[levelIndex]['ifCase']===1){
      ifIsTrue=Math.floor(Math.random()*2)+1===1;
    if(ifIsTrue){
      resetImg(apple,'apple');      
      apple = document.querySelector('#apple');

     }else{
      document.getElementById('question').style.color='rgb(0 0 0 / 0)'
     }}

     if (settings[levelIndex]['ifCase']===2){
      ifIsTrue=Math.floor(Math.random()*2)+1===1;
    if(ifIsTrue){
      resetImg(stone,'stone');      
      stone = document.querySelector('#stone');

     }else{
      document.getElementById('question').style.color='rgb(0 0 0 / 0)'
     }}



    console.log(apple+'apple');
    let apple_pos = apple.getBoundingClientRect();
    let stone_pos= stone.getBoundingClientRect();
    hedgehog.style.transform='rotate(0deg)';
    let pos_x = hedgehog.getBoundingClientRect().left;
    let pos_y = hedgehog.getBoundingClientRect().top;
    hedgehog.style.transform = 'rotate('+settings[levelIndex]['degrees']+'deg)';
  
    let save_pos_x = pos_x
    let save_pos_y = pos_y
    console.log(save_pos_x,save_pos_y)
    console.log(hedgehog, pos_x, hedgehog.getAttribute('width') )
    var degree=settings[levelIndex]['degrees']
    var index=0;
    const wait_seconds=0.5
    var wait=0;
    let loop = [1,1];
    let startBlockIndex=[-1,-1];
    let countRepeat=0;
    let countEndBlock=0;
    let maxLoopLevel=0;

    const delay = 400

   

    clearInterval(id);
    id = setInterval(frame, delay); 
    function frame() {
      //TODO
      let command = commands[levelIndex][index];
      let hh_pos=hedgehog.getBoundingClientRect();    

      if (commands[levelIndex].length===index || isCollide(hh_pos,stone_pos)) {      
        if (wait>=wait_seconds){
          setDefaultPositions(save_pos_x,save_pos_y);
                    //TODO comparation commands.forEach(i,e=>{ solution[i]===e return });
          var message;
          if (JSON.stringify(settings[levelIndex]['solution'])===JSON.stringify(commands[levelIndex])){
            message = '–í—ñ—Ç–∞—é! \u{1F603}';
            success[levelIndex]='\u{1F603}';
            localStorage.success=JSON.stringify(success);

          }
          else{
            message = "–¢—Ä–µ–±–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –∫–æ–¥, –∞–±–æ –∂ –∑ –∫–æ–¥–æ–º –≤—Å–µ –≥–∞—Ä–∞–∑–¥, –∞–ª–µ –Ω–µ –ø–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó. \u{1F928} "
          }
          alert(message);
          clearInterval(id);
        }
        else{

          wait+=delay/1000;
          console.log(wait+' wait')

        }
          console.log( hedgehog.getBoundingClientRect().left   );

       
      } else {
        //Here setup if operators by adding ||

        index=ifCase(index,IF+' '+APPLE,1,ifIsTrue);
        console.log('index=',index);

        index=ifCase(index,IF+' '+STONE,2,ifIsTrue);
        console.log('index=',index,' command=',command);

        index=ifCase(index,IF+' '+NO_STONE,2,!ifIsTrue);
        console.log('index=',index,' command=',command);
        command = commands[levelIndex][index];

        if(command===PICK_UP){
          // let hh_pos=hedgehog.getBoundingClientRect();    
        
          if (isCollide(hh_pos, apple_pos)){
            console.log('here remove')
            //TODO add hh with apple at same position

            hedgehog.setAttribute('src',"images/hh_apple.png");
            apple.style.opacity = 0;
            if(settings[levelIndex]['questionAt']!==undefined){

            document.getElementById('question').style.color='rgb(0 0 0 / 0)';}

          }
        }
        if(command===LEFT){
          degree-=90
        } 
        //TODO
        if(command===RIGHT) {
          degree+=90
        }        
        hedgehog.style.transform = 'rotate('+degree+'deg)';
        if (degree**2===360**2){
          degree=0
        }
        console.log('size: '+ hedgehog.getAttribute('width'));
        //TODO
        if (command===FW){
          pos_x+= 50 * Math.cos(degree*Math.PI/180); 
          pos_y+= 52 * Math.sin(degree*Math.PI/180); 

          hedgehog.style.left = pos_x + "px"; 
          hedgehog.style.top = pos_y + "px"; 
        }  
        if (command.includes(REPEAT)){
          //Only for numbers up to 9
          if (countRepeat===0){
            loop[0]=command.slice(-1);
            startBlockIndex[0]=index;   
               countRepeat++
          } else{
            loop[1]=command.slice(-1);
            startBlockIndex[1]=index;        
            
          }
          if (maxLoopLevel<2){
            maxLoopLevel++
          }

        }            
        index++;
//TODO  
        if(command===ENDBLOCK){
          if ( loop[1]>1){
            loop[1]--;
            index=startBlockIndex[1]+1;
            countEndBlock=0;
          } else{
            countEndBlock++
            if(countEndBlock>=maxLoopLevel ){
              if (loop[0]>1){
                loop[0]--
                index= startBlockIndex[0]+1;
              }else{
                countRepeat=0;
                maxLoopLevel=0;
              }
              countEndBlock=0;
            }

          }

        }
      // }
      }
    }
  }



//drop down
function myFunction() {
  document.querySelector("#myDropdown").classList.toggle("show");
}

function myFunctionIf() {
  document.querySelector("#myDropdownIf").classList.toggle("show");
}
// Close the dropdown if the user clicks outside of it
window.onclick = function(event) {
  if (!event.target.matches('.dropbtn')) {
    var dropdowns = document.getElementsByClassName("dropdown-content");
    var i;
    for (i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (openDropdown.classList.contains('show')) {
        openDropdown.classList.remove('show');
      }
    }
  }
}  

// document.addEventListener('DOMContentLoaded', function(){
//     document.querySelector('#btnFw')=function(){button.onclick=onBtnFw();}
// })
